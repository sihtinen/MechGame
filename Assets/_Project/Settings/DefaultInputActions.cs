//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_Project/Settings/DefaultInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputActions"",
    ""maps"": [
        {
            ""name"": ""Mech"",
            ""id"": ""08b52407-b896-4c40-b159-ab7fc74c9aa3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""89c37b25-5623-4dfe-a508-bf2cc1df22e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""dbb34227-4158-4f59-a3b5-fcaed61f72ae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ArmLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ff31bd43-a27a-405b-9921-73a6f0b8fd16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArmRight"",
                    ""type"": ""Button"",
                    ""id"": ""cbe47e49-9053-4e76-8c4d-c0dfb0076594"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShoulderLeft"",
                    ""type"": ""Button"",
                    ""id"": ""78d436f6-5f9c-4638-b38e-b419fcc2d66b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShoulderRight"",
                    ""type"": ""Button"",
                    ""id"": ""64e51658-4a83-4cd2-94a4-18e81e7a4ee0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""44ae8ae4-1889-461f-9c84-6b0f4081475d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""19a12eb5-a990-447a-af4e-22b33fe6b1fe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ca68a978-c1c8-4b69-8087-9b539704d3e6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e04714a8-41e9-4c88-8b7d-f019c84fbdd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bb4bfc4a-57d2-4300-a115-2cd2092faf67"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""579e7c28-36b3-4719-ad9c-851400dec723"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b60013b-69ea-4a33-8be1-3c9641c4da65"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9547ac1-fb3f-4a5e-862c-6ea8add65474"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfd9c82b-ab68-454e-9440-0021b32a73b7"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArmLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df228c41-5fad-4802-bfff-0ab4041fb72e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArmLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""925a7776-e312-4e8d-9898-84f0504272ed"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArmRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e13316f8-8f62-443e-a77f-965c4b4df444"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArmRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8982916-8726-47c7-b75e-5c9ae7c948b6"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShoulderLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b4267ef-83c1-4fba-ad99-bcfa73115abf"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShoulderLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c31770-bb22-402d-bdb4-133cea770d94"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShoulderRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ab62c8-08c4-47eb-bc9f-1b8a6a7aa392"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShoulderRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mech
        m_Mech = asset.FindActionMap("Mech", throwIfNotFound: true);
        m_Mech_Move = m_Mech.FindAction("Move", throwIfNotFound: true);
        m_Mech_Look = m_Mech.FindAction("Look", throwIfNotFound: true);
        m_Mech_ArmLeft = m_Mech.FindAction("ArmLeft", throwIfNotFound: true);
        m_Mech_ArmRight = m_Mech.FindAction("ArmRight", throwIfNotFound: true);
        m_Mech_ShoulderLeft = m_Mech.FindAction("ShoulderLeft", throwIfNotFound: true);
        m_Mech_ShoulderRight = m_Mech.FindAction("ShoulderRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mech
    private readonly InputActionMap m_Mech;
    private List<IMechActions> m_MechActionsCallbackInterfaces = new List<IMechActions>();
    private readonly InputAction m_Mech_Move;
    private readonly InputAction m_Mech_Look;
    private readonly InputAction m_Mech_ArmLeft;
    private readonly InputAction m_Mech_ArmRight;
    private readonly InputAction m_Mech_ShoulderLeft;
    private readonly InputAction m_Mech_ShoulderRight;
    public struct MechActions
    {
        private @DefaultInputActions m_Wrapper;
        public MechActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Mech_Move;
        public InputAction @Look => m_Wrapper.m_Mech_Look;
        public InputAction @ArmLeft => m_Wrapper.m_Mech_ArmLeft;
        public InputAction @ArmRight => m_Wrapper.m_Mech_ArmRight;
        public InputAction @ShoulderLeft => m_Wrapper.m_Mech_ShoulderLeft;
        public InputAction @ShoulderRight => m_Wrapper.m_Mech_ShoulderRight;
        public InputActionMap Get() { return m_Wrapper.m_Mech; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MechActions set) { return set.Get(); }
        public void AddCallbacks(IMechActions instance)
        {
            if (instance == null || m_Wrapper.m_MechActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MechActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @ArmLeft.started += instance.OnArmLeft;
            @ArmLeft.performed += instance.OnArmLeft;
            @ArmLeft.canceled += instance.OnArmLeft;
            @ArmRight.started += instance.OnArmRight;
            @ArmRight.performed += instance.OnArmRight;
            @ArmRight.canceled += instance.OnArmRight;
            @ShoulderLeft.started += instance.OnShoulderLeft;
            @ShoulderLeft.performed += instance.OnShoulderLeft;
            @ShoulderLeft.canceled += instance.OnShoulderLeft;
            @ShoulderRight.started += instance.OnShoulderRight;
            @ShoulderRight.performed += instance.OnShoulderRight;
            @ShoulderRight.canceled += instance.OnShoulderRight;
        }

        private void UnregisterCallbacks(IMechActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @ArmLeft.started -= instance.OnArmLeft;
            @ArmLeft.performed -= instance.OnArmLeft;
            @ArmLeft.canceled -= instance.OnArmLeft;
            @ArmRight.started -= instance.OnArmRight;
            @ArmRight.performed -= instance.OnArmRight;
            @ArmRight.canceled -= instance.OnArmRight;
            @ShoulderLeft.started -= instance.OnShoulderLeft;
            @ShoulderLeft.performed -= instance.OnShoulderLeft;
            @ShoulderLeft.canceled -= instance.OnShoulderLeft;
            @ShoulderRight.started -= instance.OnShoulderRight;
            @ShoulderRight.performed -= instance.OnShoulderRight;
            @ShoulderRight.canceled -= instance.OnShoulderRight;
        }

        public void RemoveCallbacks(IMechActions instance)
        {
            if (m_Wrapper.m_MechActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMechActions instance)
        {
            foreach (var item in m_Wrapper.m_MechActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MechActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MechActions @Mech => new MechActions(this);
    public interface IMechActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnArmLeft(InputAction.CallbackContext context);
        void OnArmRight(InputAction.CallbackContext context);
        void OnShoulderLeft(InputAction.CallbackContext context);
        void OnShoulderRight(InputAction.CallbackContext context);
    }
}
